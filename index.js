const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('users.db');
const fs = require('fs').promises;
require('dotenv').config();
// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ
const {TELEGRAM_BOT_TOKEN, ADMIN_ID} = process.env, TelegramApi = require('node-telegram-bot-api'),
    bot = new TelegramApi(TELEGRAM_BOT_TOKEN, {polling: true});

db.run(`CREATE TABLE IF NOT EXISTS users (
            id                            INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id                       INTEGER UNIQUE,
            username                      TEXT,
            phone                         TEXT,
            gender                        TEXT DEFAULT '–ú',
            height                        REAL DEFAULT 0,
            middle                        REAL DEFAULT 0,
            format                        TEXT DEFAULT '–æ–±—â–∏–π',
            weight                        REAL DEFAULT 0,
            fat                           REAL DEFAULT 0,
            activity                      REAL DEFAULT 0,
            target                        TEXT DEFAULT '–ø–æ—Ö—É–¥–µ—Ç—å',
            state                         TEXT DEFAULT 'start_gender',
            calories                      REAL DEFAULT 0
        );`);

bot.on('contact', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await updatePhoneNumber(msg.from.id, msg.contact.phone);
});
bot.on('document', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});
bot.on('photo', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});
bot.on('voice', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});

// –ù–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ —Ä–µ–∞–∫—Ü–∏—è
bot.on('text', async msg => {
await console.log(msg);
    const username = msg.chat.username || 'unknown';
    const chatID = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞ (–æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏)
    if (msg.from.is_bot)
        return await bot.sendMessage(ADMIN_ID, `@${username}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ—Ç!!`);

    // –ï—Å–ª–∏ –Ω–µ –±–æ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await checkUserInDatabase(chatID, username);

    const text = msg.text || '';
    const msgType = msg.entities ? msg.entities[0].type : 'text';

    if (msgType === 'bot_command') {
        if (text === '/start') {        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await sayHello(chatID);
            return ;
        } else if (text === '/command') {
            return;
        }
    } else {
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É
        await notifyAdmin(ADMIN_ID, username, text);
    }

    let state = await getUserState(chatID);
    switch (state) {
        case 'start_gender':
        case 'gender':
            await updateGenderDatabase(chatID, text, state);
            if (state === 'start_gender')
                await askMiddle(chatID);
            break;

        case 'start_format':
        case 'format':
            await updateFormatDatabase(chatID, text);
            text === 'üë•üåç –û–±—â–∏–π üîÑüì¢' ? await askChooseWeight(chatID) : await askWeight(chatID);
            break;

        case 'start_target':
        case 'target':
            await updateTargetDatabase(chatID, text);
            if (state === 'start_target')
                await findCaloriesDatabase(chatID, state);
            break;

        case 'start_choose_weight':
        case 'choose_weight':
            await updateChooseWeightDatabase(chatID, text);
            await askChoosePrice(chatID);
            break;

        case 'start_activity':
        case 'activity':
            await updateActivityDatabase(chatID, text, state);
            if (state === 'start_activity')
                await askTarget(chatID);
            break;

        case 'start_choose_price':
        case 'choose_price':
            await updateChoosePriceDatabase(chatID, text, state);
            if (state === 'start_choose_price')
                await askDelivery(chatID);
            break;

        default:
            await bot.sendMessage(chatID, '–¶–µ —à–æ?');
            break;
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞
async function sayHello(userId) {
    const helloMsg = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ ¬´Food Options¬ª!\n\n' +
        '–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏ –≤–∫—É—Å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. –ú–æ—è –º–∏—Å—Å–∏—è - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∞—à –≤—ã–±–æ—Ä –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –≤–∫—É—Å–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n' +
        '–ß—Ç–æ –º—ã –º–æ–∂–µ–º –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å\n' +
        'üí† –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–ª–æ—Ä–∞–∂, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n' +
        'üí† –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é, –∏—Å–∫–ª—é—á–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∏–∑-–∑–∞ —è–∑–≤, –≥–∞—Å—Ç—Ä–∏—Ç–∞, –ª–∞–∫—Ç–æ–∑–Ω–æ–π –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π.\n' +
        'üí† –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–ª—é–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∏ –≤–∫—É—Å–∞–º.\n' +
        'üí† –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n' +
        'üí† –î–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π, —Å–∫–∏–¥–æ–∫ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n' +
        '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ Instagram: https://www.instagram.com/foodoptions.kz/\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ú—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ WhatsApp: https://wa.me/77776886396\n\n' +
        '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ! üçΩÔ∏èüåø';
/*
    const startSettings = '–î–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—á—ë—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∫–µ—Ç—É, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ.\n\n' +
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:' +
        '    ü§∏‚öñÔ∏è –û–±—â–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ / –∫–≥ ‚öñÔ∏è\n' +
        '    ü§∏‚Äç‚ôÄÔ∏è % –∂–∏—Ä–∞ ü§∏‚Äç‚ôÄÔ∏è\n' +
        '    üçΩÔ∏è –î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π üìâ\n' +
        '    üçî –ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π üìà';
*/

    await updateStateInDatabase(userId, 'start_gender');
    await bot.sendMessage(userId, helloMsg);
    await askMale(userId);
}

/*********************************************************
 *****    *****            –ü–û–õ               *****   *****
 *********************************************************/
async function askMale(userId) {
    const genderKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üëî –ú—É–∂—á–∏–Ω–∞ üë®' },
                    { text: 'üë† –ñ–µ–Ω—â–∏–Ω–∞ üë©' }
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?', genderKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateGenderDatabase(userId, genderInput, state) {
    let newState = (state !== 'start_gender' ? 'default' : 'start_middle');
    const validatedGender = (genderInput === 'üëî –ú—É–∂—á–∏–Ω–∞ üë®' ? '–ú' : '–ñ');

    db.run('UPDATE users SET gender = ?, state = ? WHERE user_id = ?', [validatedGender, newState, userId], async err => {
        if (err) {
            await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞: ${err}`);
            await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
        }
    });
}

/*********************************************************
 *****    *****            –¢–ê–õ–ò–Ø            *****   *****
 *********************************************************/
async function askMiddle(userId) {
    await bot.sendMessage(userId, 'üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Ç–∞–ª–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90) üëñ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏
async function updateMiddleDatabase(userId, middleInput, newState = 'default') {

}
/*********************************************************
 *****    *****            –†–û–°–¢              *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function askHeight(userId) {
    await bot.sendMessage(userId, 'üìè –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 185) üë§');
}

async function updateHeightDatabase(userId, heightInput, newState = 'default') {

}
/*********************************************************
 *****    *****  –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –ü–ò–¢–ê–ù–ò–Ø  *****   *****
 *********************************************************/
async function askFormat(userId) {
    const genderKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üë•üåç –û–±—â–∏–π üîÑüì¢' },
                    { text: 'üë§üí° –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π üåüüîç' }
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–∏—Ç–∞–Ω–∏—è:', genderKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateFormatDatabase(userId, formatInput) {
    const validatedFormat = (formatInput === 'üë•üåç –û–±—â–∏–π üîÑüì¢' ? '–æ–±—â' : '–∏–Ω–¥–∏–≤');
    let newState = (validatedFormat === '–∏–Ω–¥–∏–≤' ? 'start_weight' : 'start_choose_weight');

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET format = ?, state = ? WHERE user_id = ?', [validatedFormat, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****    –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –í–ï–°–ê   *****   *****
 *********************************************************/
async function askChooseWeight(userId) {
    const chooseWeightKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: '55-60 ü•¶'},
                    { text: '65-70 üçá'}
                ],
                [
                    { text: '75-80 üçè'},
                    { text: '85-90 üçä'}
                ],
                [
                    { text: '95-100 üçñ'},
                    { text: '105-110 üç∞'}
                ],
                [
                    { text: '115-120 üçï'},
                    { text: '125-130 üçî'}
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–µ—Å:', chooseWeightKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function validateAndGetChooseWeight(chooseWeightInput) {
    const chooseWeight = {
        '55-60 ü•¶': 55,
        '65-70 üçá': 65,
        '75-80 üçè': 75,
        '85-90 üçä': 85,
        '95-100 üçñ': 95,
        '105-110 üç∞': 105,
        '115-120 üçï': 115,
        '125-130 üçî': 125
    };

    return chooseWeight[chooseWeightInput] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateChooseWeightDatabase(userId, chooseWeightInput) {
    const validatedChooseWeight = validateAndGetChooseWeight(chooseWeightInput);

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET weight = ?, state = ? WHERE user_id = ?', [validatedChooseWeight, 'start_price', userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****    –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –¶–ï–ù–´   *****   *****
 *********************************************************/
async function askChoosePrice(userId) {
    const choosePriceKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                { text: 'ü•¶'},
                { text: 'üçî'}
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å —Ü–µ–Ω–æ–π:', choosePriceKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã
async function validateAndGetChoosePrice(choosePriceInput) {
    const choosePrice = {
        'X': 1,
        'Y': 2
    };

    return choosePrice[choosePriceInput] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateChoosePriceDatabase(userId, choosePriceInput, state) {
    const newActivityCoefficient = validateAndGetChoosePrice(choosePriceInput);
    let newState = (state === 'start_choose_price' ? 'delivery' : 'default');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞
    await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');

}
/*********************************************************
 *****    *****              –í–ï–°             *****   *****
 *********************************************************/
async function askWeight(userId) {
    await bot.sendMessage(userId, 'üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 88,5) üèãÔ∏è‚Äç‚ôÇÔ∏è:');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateWeightDatabase(userId, weightInput, newState = 'default') {

}

/*********************************************************
 *****    *****             –ñ–ò–†              *****   *****
 *********************************************************/
async function askFat(userId) {
    await bot.sendMessage(userId, 'üí™ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∞—à–µ–≥–æ –∂–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0,25) üìâ:');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateFatDatabase(userId, fatInput, newState = 'default') {

}
/*********************************************************
 *****    *****          –ê–ö–¢–ò–í–ù–û–°–¢–¨          *****   *****
 *********************************************************/
async function askActive(chatID) {
    const activeKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                { text: 'üë©‚Äçüíª –ë—ã—Ç–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞) üè†' },
                { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—é üí™' },
                { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üî•' },
                { text: 'üèãÔ∏è‚Äç‚ôÄÔ∏è –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üí¶' },
                { text: 'Ô∏è‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üí¶' },
                { text: 'Ô∏èüèãÔ∏è‚Äç‚ôÄÔ∏èüåû –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é (2 —Ä–∞–∑–∞/–¥–µ–Ω—å) üí¶üåô' }
            ]
        })
    };

    const active = 'üèÉ‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? üßò‚Äç‚ôÇÔ∏èüìä';
    await bot.sendMessage(chatID, active, activeKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function validateAndGetActivityCoefficient(activityDescription) {
    const activityCoefficients = {
        '–ë—ã—Ç–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)': 1.2,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—é': 1.38,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.46,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.55,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.64,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.73,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é (2 —Ä–∞–∑–∞/–¥–µ–Ω—å)': 1.9
    };

    return activityCoefficients[activityDescription] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function updateActivityDatabase(userId, activityDescription, state) {
    const newActivityCoefficient = validateAndGetActivityCoefficient(activityDescription);
    let newState = (state === 'start_activity' ? 'start_target' : 'default');

    if (newActivityCoefficient === null) {
        await logError(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activityDescription}`);
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET activity = ?, state = ? WHERE user_id = ?', [newActivityCoefficient, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****             –¶–ï–õ–¨             *****   *****
 *********************************************************/
async function askTarget(userId) {
    const targerKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                { text: 'üèãÔ∏è‚Äç‚ôÄÔ∏èü•ó –ü–æ—Ö—É–¥–µ—Ç—å üèÉ‚Äç‚ôÄÔ∏èÔ∏è' },
                { text: 'üçîüõãÔ∏è –ü–æ—Ç–æ–ª—Å—Ç–µ—Ç—å üç∞' }
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è:', targerKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateTargetDatabase(userId, targetInput) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET target = ?, state = ? WHERE user_id = ?', [targetInput, 'calories', userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****           –ö–ê–õ–û–†–ò–ò            *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—á—ë—Ç–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞
async function findCaloriesDatabase(userId, state) {

}
/*********************************************************
 *****    *****           –î–æ—Å—Ç–∞–≤–∫–∞            *****   *****
 *********************************************************/
/*async function askDelivery(userId) {
    const deliveryKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                { text: 'üåÖ‚òï –£—Ç—Ä–æ (7-9) üç≥' },
                { text: 'üåÜüç∑ –í–µ—á–µ—Ä (21-23) üåô' }
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateDeliveryDatabase(userId, targetInput) {
    db.run('UPDATE users SET delivery = ?, state = ? WHERE user_id = ?', [targetInput, 'calories', userId], async err => {
        if (err) {
            await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è: ${err}`);
            await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
        }
    });
}*/
/*********************************************************
 *****    *****            –ü–†–û–ß–ï–ï            *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserState(userID) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT state FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(row);
            });
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return row ? row.state : null;
    } catch (err) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
        throw err;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≥–µ–Ω–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getGenderUser(userID) {
    try {
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT gender FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
                    reject(err);
                    return;
                }
                resolve(row);
            });
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return row ? row.gender : null;
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è user_id ${userID}: ${err}`);
        throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function getStateOrder(currentState, currentFormat) {
    // –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    const allStatesStart = [
        'start_gender', 'start_middle', 'start_height', 'start_format',
    ];

    const allStatesDefaultStart = [
        'start_choose_weight', 'start_price',
    ];

    const allStatesIndividualStart = [
        'start_weight', 'start_fat', 'start_activity', 'start_target', 'start_calories',
    ];

    const allStatesDefault = [
        'gender', 'middle', 'height', 'format', 'choose_weight', 'price', 'weight', 'fat', 'activity', 'target', 'delivery',
    ];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let newState = "", currentIndex = allStatesDefault.indexOf(currentState);

    if (currentIndex !== -1 && currentIndex !== allStatesDefault.length - 1) {
        newState = allStatesDefault[currentIndex + 1];
    }
    else {
        if (currentIndex === allStatesDefault.length - 1) {
            newState = 'default';
        }
        else {
            currentIndex = allStatesStart.indexOf(currentState);
            if (currentIndex !== -1 && currentIndex !== allStatesStart.length - 1) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ
                newState = allStatesStart[currentIndex + 1];
            } else if (currentIndex === allStatesStart.length - 1) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –æ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
                if (currentFormat === "–æ–±—â") { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–∞—Ç - –æ–±—â–∏–π
                    newState = allStatesDefaultStart[0];
                } else if (currentFormat === "–∏–Ω–¥–∏–≤") { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–∞—Ç - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π
                    newState = allStatesIndividualStart[0]
                }
            } else {
                if (currentFormat === "–æ–±—â") {
                    currentIndex = allStatesDefaultStart.indexOf(currentState);
                    if (currentIndex !== -1 && currentIndex !== allStatesDefaultStart.length - 1) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—â–µ–µ
                        newState = allStatesDefaultStart[currentIndex + 1];
                    } else {
                        newState = allStatesDefault[allStatesDefault.length - 1];
                    }
                } else if (currentFormat === "–∏–Ω–¥–∏–≤") {
                    currentIndex = allStatesIndividualStart.indexOf(currentState);
                    if (currentIndex !== -1 && currentIndex !== allStatesIndividualStart.length - 1) { // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—â–µ–µ
                        newState = allStatesIndividualStart[currentIndex + 1];
                    } else {
                        newState = allStatesDefault[allStatesDefault.length - 1];
                    }
                }
            }
        }
    }
    return newState;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å—Ç–∞—Ç—É—Å–æ–≤)
async function setNextStates(userID) {
    try {
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT state, format FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(row);
            });
        });

        if (!row) {
            await logError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        const { state: currentState, format: currentFormat } = row;
        const newState = getNextState(currentState, currentFormat);

        if (newState !== null) {
            await updateStateInDatabase(userID, newState);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
            await logError(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userID}`);
        }
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserInDatabase(userID, username) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userID
        const existingUser = await new Promise((resolve, reject) => {
            db.get('SELECT user_id FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(row);
            });
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if (existingUser) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        await new Promise((resolve, reject) => {
            const query = 'INSERT INTO users (user_id, username) VALUES (?, ?)';
            db.run(query, [userID, username], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(); // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            });
        });
    } catch (err) { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
        await bot.sendMessage(userID, '–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ user_id
async function updateUsernameInDatabase(userID, newUsername) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET username = ? WHERE user_id = ?', [newUsername, userID], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
    }
}

// –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function updateStateInDatabase(userID, newState) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET state = ? WHERE user_id = ?', [newState, userID], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è userID ${userID}: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
    }
}
/*********************************************************
 ***    *****   –í–ê–ñ–ù–´–ï –ß–ê–°–¢–ò –î–õ–Ø –†–ê–ë–û–¢–´       ****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function notifyAdmin(userId, username, text = '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞') {
//    if (ADMIN_ID !== userId) {
        await bot.sendMessage(ADMIN_ID, `@${username || userId}: ${text}`);
//    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function forwardAdmin(msg) {
    await bot.forwardMessage(ADMIN_ID, msg.chat.id, msg.message_id); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.on('error', async err => {
    await notifyAdmin(ADMIN_ID, '', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–ª–∞ –≥–æ–≤–Ω–∞');
    await logError(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err}`);
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('exit', async () => {
    db.close(async err => {
        if (err) {
            await notifyAdmin(ADMIN_ID, '', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err}`);
        }
    });
});

/*********************************************************
 ***    *****           –¢–ï–õ–ï–§–û–ù               ****   *****
 *********************************************************/
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const updatePhoneNumber = async (userID, phoneNumber) => {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET phone = ? WHERE user_id = ?', [phoneNumber, userID], (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
        console.log(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userID}`); // –ò—Å–ø–æ–ª—å–∑—É–µ–º console.log –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
        await bot.sendMessage(userID, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª
async function logError(err) {
    const errorMessage = `[${new Date().toISOString()}] ${err}\n`;
    try {
        await fs.appendFile('error.log', errorMessage);
    } catch (fileErr) {
        await notifyAdmin(ADMIN_ID, '', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª', fileErr);
    }
}
