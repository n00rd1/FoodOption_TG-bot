const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('users.db');
const fs = require('fs').promises;
require('dotenv').config();
const {TELEGRAM_BOT_TOKEN, ADMIN_ID} = process.env, TelegramApi = require('node-telegram-bot-api'),
    bot = new TelegramApi(TELEGRAM_BOT_TOKEN, {polling: true});

db.run(`CREATE TABLE IF NOT EXISTS users (
            id                            INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id                       INTEGER UNIQUE,
            username                      TEXT,
            phone                         TEXT,
            gender                        TEXT DEFAULT '–ú' CHECK(gender IN ('–ú', '–ñ')),
            height                        REAL DEFAULT 0,
            middle                        REAL DEFAULT 0,
            format                        TEXT DEFAULT '–æ–±—â–∏–π' CHECK(format IN ('–∏–Ω–¥–∏–≤', '–æ–±—â–∏–π')),
            choose_weight                 TEXT,
            choose_price                  TEXT,
            choose_per_days               TEXT,
            weight                        REAL DEFAULT 0,
            fat                           REAL DEFAULT 0,
            activity                      REAL DEFAULT 1.2 CHECK(activity IN (1.2, 1.38, 1.46, 1.55, 1.64, 1.73, 1.9)),
            target                        TEXT DEFAULT '—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞' CHECK(target IN ('—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞', '–Ω–∞–±–æ—Ä –≤–µ—Å–∞')),
            state                         TEXT DEFAULT 'start_gender',
            calories                      REAL DEFAULT 0,
            delivery                      TEXT CHECK(delivery IN ('—É—Ç—Ä–æ','–≤–µ—á–µ—Ä')),
            registration_date             DATETIME DEFAULT CURRENT_TIMESTAMP,
            news_letter                   BOOLEAN DEFAULT TRUE                                
        );`);

bot.on('contact', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await updatePhoneNumber(msg.from.id, msg.contact.phone);
});
bot.on('document', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});
bot.on('photo', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});
bot.on('voice', async (msg) => { // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
    await notifyAdmin(msg.from.id, msg.chat.username || 'unknown', "–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"); // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    await forwardAdmin(msg); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.sendMessage(msg.from.id, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!`);
});

// –ù–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ —Ä–µ–∞–∫—Ü–∏—è
bot.on('text', async msg => {
await console.log(msg);
    const username = msg.chat.username || 'unknown';
    const chatID = msg.chat.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–∞ (–æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏)
    if (msg.from.is_bot)
        return await bot.sendMessage(ADMIN_ID, `@${username}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ—Ç!!`);

    // –ï—Å–ª–∏ –Ω–µ –±–æ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await checkUserInDatabase(chatID, username);

    const text = msg.text || '';
    const msgType = msg.entities ? msg.entities[0].type : 'text';

    if (msgType === 'bot_command') {
        if (text === '/start') {        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await sayHello(chatID);
        } else if (text === '/cancel') {
            await unsubscribeFromNews(chatID);
        } else if (text === '/info') {
            await sendUserInfo(chatID);
        } else if (text === '/text') {
            await broadcastTextMessageWithUnsubscribe(text, chatID);
        } else if (text === '/photo') {
            await broadcastPhotoToAllUsers(msg, chatID);
        }
    } else {
        let state = await getUserState(chatID);
        switch (state) {
            case 'send_adm':
                await broadcastContentToAllUsers(text, chatID)
                break;

            case 'start_gender':
            case 'gender':
                await updateGenderDatabase(chatID, text, state);
                if (state === 'start_gender')
                    await askMiddle(chatID);
                break;

            case 'start_middle':
            case 'middle':
                await updateMiddleDatabase(chatID, text, state);
                if (state === 'start_middle')
                    await askHeight(chatID);
                break;

            case 'start_height':
            case 'height':
                await updateHeightDatabase(chatID, text, state);
                if (state === 'start_height')
                    await askFormat(chatID);
                break;

            case 'start_format':
            case 'format':
                await updateFormatDatabase(chatID, text);
                text === 'üë•üåç –û–±—â–∏–π üîÑüì¢' ? await askChooseWeight(chatID) : await askWeight(chatID);
                break;

            case 'start_choose_weight':
            case 'choose_weight':
                await updateChooseWeightDatabase(chatID, text);
                await askChoosePrice(chatID);
                break;

            case 'start_choose_price':
            case 'choose_price':
                await updateChoosePriceDatabase(chatID, text, state);
                if (state === 'start_choose_price')
                    await askDelivery(chatID);
                break;

            case 'start_weight':
            case 'weight':
                await updateWeightDatabase(chatID, text, state);
                if (state === 'start_weight')
                    await askFat(chatID);
                break;

            case 'start_fat':
            case 'fat':
                await updateFatDatabase(chatID, text, state);
                if (state === 'start_fat')
                    await askActive(chatID);
                break;

            case 'start_activity':
            case 'activity':
                await updateActivityDatabase(chatID, text, state);
                if (state === 'start_activity')
                    await askTarget(chatID);
                break;

            case 'start_target':
            case 'target':
                await updateTargetDatabase(chatID, text);
                if (state === 'start_target')
                    await findCaloriesDatabase(chatID, state);
                break;

            case 'delivery':
                await updateDeliveryDatabase(chatID, text);
                break;

            default:
                await notifyAdmin(ADMIN_ID, username, text);
                break;
        }
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞
async function sayHello(userId) {
    const helloMsg = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ ¬´Food Options¬ª!\n\n' +
        '–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏ –≤–∫—É—Å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è. –ú–æ—è –º–∏—Å—Å–∏—è - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∞—à –≤—ã–±–æ—Ä –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –≤–∫—É—Å–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n' +
        '–ß—Ç–æ –º—ã –º–æ–∂–µ–º –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å\n' +
        'üí† –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–ª–æ—Ä–∞–∂, —É—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.\n' +
        'üí† –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é, –∏—Å–∫–ª—é—á–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∏–∑-–∑–∞ —è–∑–≤, –≥–∞—Å—Ç—Ä–∏—Ç–∞, –ª–∞–∫—Ç–æ–∑–Ω–æ–π –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π.\n' +
        'üí† –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–ª—é–¥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∏ –≤–∫—É—Å–∞–º.\n' +
        'üí† –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n' +
        'üí† –î–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ –∞–∫—Ü–∏–π, —Å–∫–∏–¥–æ–∫ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n' +
        '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ Instagram: https://www.instagram.com/foodoptions.kz/\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ú—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ WhatsApp: https://wa.me/77776886396\n\n' +
        '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ! üçΩÔ∏èüåø';
/*
    const startSettings = '–î–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—á—ë—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∫–µ—Ç—É, –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ.\n\n' +
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:' +
        '    ü§∏‚öñÔ∏è –û–±—â–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ / –∫–≥ ‚öñÔ∏è\n' +
        '    ü§∏‚Äç‚ôÄÔ∏è % –∂–∏—Ä–∞ ü§∏‚Äç‚ôÄÔ∏è\n' +
        '    üçΩÔ∏è –î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π üìâ\n' +
        '    üçî –ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π üìà';
*/

    await updateStateInDatabase(userId, 'start_gender');
    await bot.sendMessage(userId, helloMsg);
    await askMale(userId);
}

/*********************************************************
 *****    *****            –ü–û–õ               *****   *****
 *********************************************************/
async function askMale(userId) {
    const genderKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üëî –ú—É–∂—á–∏–Ω–∞ üë®' },
                    { text: 'üë† –ñ–µ–Ω—â–∏–Ω–∞ üë©' }
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?', genderKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateGenderDatabase(userId, genderInput, state) {
    let newState = (state !== 'start_gender' ? 'default' : 'start_middle');
    const validatedGender = (genderInput === 'üëî –ú—É–∂—á–∏–Ω–∞ üë®' ? '–ú' : '–ñ');

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET gender = ?, state = ? WHERE user_id = ?', [validatedGender, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}

/*********************************************************
 *****    *****            –¢–ê–õ–ò–Ø            *****   *****
 *********************************************************/
async function askMiddle(userId) {
    await bot.sendMessage(userId, 'üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Ç–∞–ª–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90) üëñ');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–º–µ—Ä—É —Ç–∞–ª–∏–∏
async function validateMiddle(middleInput) {
    const middle = parseInt(middleInput);
    if (isNaN(middle) || middle < 40 || middle > 150) {
        return null; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    }
    return middle; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏
async function updateMiddleDatabase(userId, middleInput, state) {
    let newState = (state !== 'start_middle' ? 'default' : 'start_height');
    const validatedMiddle = await validateMiddle(middleInput);

    if (validatedMiddle === null) {
        await bot.sendMessage(userId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET middle = ?, state = ? WHERE user_id = ?', [validatedMiddle, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****            –†–û–°–¢              *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function askHeight(userId) {
    await bot.sendMessage(userId, 'üìè –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 185) üë§');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function validateHeight(heightInput) {
    const height = parseInt(heightInput);
    if (isNaN(height) || height < 100 || height > 250) {
        return null; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    }
    return height; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateHeightDatabase(userId, heightInput, state) {
    let newState = (state !== 'start_height' ? 'default' : 'start_format');
    const validatedHeight = validateHeight(heightInput);

    if (validatedHeight === null) {
        await bot.sendMessage(userId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 100 –¥–æ 250 —Å–º.');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET height = ?, state = ? WHERE user_id = ?', [validatedHeight, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ—Å—Ç–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****  –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –ü–ò–¢–ê–ù–ò–Ø  *****   *****
 *********************************************************/
async function askFormat(userId) {
    const genderKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üë•üåç –û–±—â–∏–π üîÑüì¢' },
                    { text: 'üë§üí° –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π üåüüîç' }
                ]
            ]
        })
    };
    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–∏—Ç–∞–Ω–∏—è:', genderKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateFormatDatabase(userId, formatInput) {
    const validatedFormat = (formatInput === 'üë•üåç –û–±—â–∏–π üîÑüì¢' ? '–æ–±—â–∏–π' : '–∏–Ω–¥–∏–≤');
    let newState = (validatedFormat === '–∏–Ω–¥–∏–≤' ? 'start_weight' : 'start_choose_weight');

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET format = ?, state = ? WHERE user_id = ?', [validatedFormat, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****    –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –í–ï–°–ê   *****   *****
 *********************************************************/
async function askChooseWeight(userId) {
    const gender = await getGenderUser(userId);
    const chooseWeightKeyboardMan = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: '75-80 üçè'},
                    { text: '85-90 üçä'}
                ],
                [
                    { text: '95-100 üçñ'},
                    { text: '105-110 üç∞'}
                ],
                [
                    { text: '115-120 üçï'},
                    { text: '125-130 üçî'}
                ]
            ]
        })
    };

    const chooseWeightKeyboardWoman = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: '55-60 ü•¶'},
                    { text: '65-70 üçá'}
                ],
                [
                    { text: '75-80 üçè'},
                    { text: '85-90 üçä'}
                ],
                [
                    { text: '95-100 üçñ'},
                    { text: '105-110 üç∞'}
                ],
                [
                    { text: '115-120 üçï'},
                    { text: '125-130 üçî'}
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–µ—Å:', (gender === '–ú' ? chooseWeightKeyboardMan : chooseWeightKeyboardWoman));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function validateAndGetChooseWeight(chooseWeightInput) {
    const chooseWeight = {
        '55-60 ü•¶': '55-60',
        '65-70 üçá': '65-70',
        '75-80 üçè': '75-80',
        '85-90 üçä': '85-90',
        '95-100 üçñ': '95-100',
        '105-110 üç∞': '105-110',
        '115-120 üçï': '115-120',
        '125-130 üçî': '125-130'
    };

    return chooseWeight[chooseWeightInput] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateChooseWeightDatabase(userId, chooseWeightInput) {
    const validatedChooseWeight = await validateAndGetChooseWeight(chooseWeightInput);

    if (!validatedChooseWeight) {
        await bot.sendMessage(userId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≤–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET choose_weight = ?, state = ? WHERE user_id = ?', [validatedChooseWeight, 'start_choose_price', userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****    –í–´–ë–û–† –ò–ó –í–ê–†–ò–ê–ù–¢–û–í –¶–ï–ù–´   *****   *****
 *********************************************************/
async function askChoosePrice(userId) {
    const gender = await getGenderUser(userId);
    const choose_weight = await getWeightUser(userId);
    const price = await findPrice(gender, choose_weight);

    const choosePriceKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üóìÔ∏è 6 –¥–Ω–µ–π ‚ú®'},
                    { text: 'üóìÔ∏è 12 –¥–Ω–µ–π üåü'}
                ],
                [
                    { text: 'üóìÔ∏è 24 –¥–Ω–µ–π üí´'},
                    { text: 'üóìÔ∏è 30 –¥–Ω–µ–π üî•'}
                ]
            ]
        })
    };

    const text = `–î–ª—è –≤–µ—Å–∞ ${price['weight']} –∫–≥ –∏ —Å—É—Ç–æ—á–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ ${price['ccal']} –∫–∫–∞–ª, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n` +
        `\n` +
        `üìÖ –ù–∞ 6 –¥–Ω–µ–π: –≤–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç ${price['6_day']} ‚Ç∏ (–æ–¥–∏–Ω –¥–µ–Ω—å ‚Äî ${price['1_day']} ‚Ç∏). üí∏üåü\n` +
        `üìÖ –ù–∞ 12 –¥–Ω–µ–π: –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç ${price['12_day']} ‚Ç∏, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –±–µ–∑ —Å–∫–∏–¥–∫–∏ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –±—ã ${price['12_day_no_sale']} ‚Ç∏. üí∏‚úÇÔ∏è\n` +
        `üìÖ –ù–∞ 24 –¥–Ω–µ–π: –ø–ª–∞–Ω –æ–±–æ–π–¥–µ—Ç—Å—è –≤ ${price['24_day']} ‚Ç∏, —Å–æ —Å–∫–∏–¥–∫–æ–π –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö ${price['24_day_no_sale']} ‚Ç∏. üí∏üè∑Ô∏è` +
        `üìÖ –ù–∞ 30 –¥–Ω–µ–π: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞ ${price['30_day']} ‚Ç∏, —á—Ç–æ –º–µ–Ω—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ü–µ–Ω—ã –≤ ${price['30_day_no_sale']} ‚Ç∏. üí∏üéâ\n` +
        `üí™ü•ë –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è —Å–µ–±—è –≤–∞—Ä–∏–∞–Ω—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é –∏ —Ö–æ—Ä–æ—à–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é —Å–µ–≥–æ–¥–Ω—è! üçΩÔ∏è‚ú®`

    await bot.sendMessage(userId, text, choosePriceKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã
async function findPrice(gender, choose_weight) {
    const manPrice = [
        {
            "weight": "125-130",
            "ccal": "2400-2500",
            "1_day": 6500,
            "6_day": 39000,
            "12_day": 74100,
            "12_day_no_sale": 78000,
            "24_day": 140400,
            "24_day_no_sale": 156000,
            "30_day": 171600,
            "30_day_no_sale": 195000
        },
        {
            "weight": "115-120",
            "ccal": "2200-2300",
            "1_day": 6300,
            "6_day": 37800,
            "12_day": 71820,
            "12_day_no_sale": 75000,
            "24_day": 136080,
            "24_day_no_sale": 151200,
            "30_day": 166320,
            "30_day_no_sale": 189000
        },
        {
            "weight": "105-110",
            "ccal": "2000-2100",
            "1_day": 6100,
            "6_day": 36600,
            "12_day": 69540,
            "12_day_no_sale": 73000,
            "24_day": 131760,
            "24_day_no_sale": 146400,
            "30_day": 161040,
            "30_day_no_sale": 183000
        },
        {
            "weight": "95-100",
            "ccal": "1800-1900",
            "1_day": 5900,
            "6_day": 35400,
            "12_day": 67260,
            "12_day_no_sale": 70800,
            "24_day": 127440,
            "24_day_no_sale": 141600,
            "30_day": 155760,
            "30_day_no_sale": 177000
        },
        {
            "weight": "85-90",
            "ccal": "1650-1750",
            "1_day": 5700,
            "6_day": 34200,
            "12_day": 64980,
            "12_day_no_sale": 68400,
            "24_day": 123120,
            "24_day_no_sale": 136800,
            "30_day": 150480,
            "30_day_no_sale": 171000
        },
        {
            "weight": "75-80",
            "ccal": "1600-1700",
            "1_day": 5500,
            "6_day": 33000,
            "12_day": 62700,
            "12_day_no_sale": 66000,
            "24_day": 118800,
            "24_day_no_sale": 132000,
            "30_day": 145200,
            "30_day_no_sale": 165000
        }
    ];
    const womanPrice = [
        {
            "weight": "125-130",
            "ccal": "2050-2100",
            "1_day": 6000,
            "6_day": 36000,
            "12_day": 68400,
            "12_day_no_sale": 72000,
            "24_day": 129600,
            "24_day_no_sale": 144000,
            "30_day": 158400,
            "30_day_no_sale": 180000
        },
        {
            "weight": "115-120",
            "ccal": "1900-1950",
            "1_day": 5800,
            "6_day": 34800,
            "12_day": 66120,
            "12_day_no_sale": 69600,
            "24_day": 125280,
            "24_day_no_sale": 139200,
            "30_day": 153120,
            "30_day_no_sale": 174000
        },
        {
            "weight": "105-110",
            "ccal": "1810-1850",
            "1_day": 5600,
            "6_day": 33600,
            "12_day": 63840,
            "12_day_no_sale": 67200,
            "24_day": 120960,
            "24_day_no_sale": 134400,
            "30_day": 147840,
            "30_day_no_sale": 168000
        },
        {
            "weight": "95-100",
            "ccal": "1710-1750",
            "1_day": 5400,
            "6_day": 32400,
            "12_day": 61560,
            "12_day_no_sale": 64800,
            "24_day": 116640,
            "24_day_no_sale": 129600,
            "30_day": 142560,
            "30_day_no_sale": 162000
        },
        {
            "weight": "85-90",
            "ccal": "1610-1650",
            "1_day": 5200,
            "6_day": 31200,
            "12_day": 59280,
            "12_day_no_sale": 62400,
            "24_day": 112320,
            "24_day_no_sale": 124800,
            "30_day": 137280,
            "30_day_no_sale": 156000
        },
        {
            "weight": "75-80",
            "ccal": "1510-1550",
            "1_day": 5000,
            "6_day": 30000,
            "12_day": 57000,
            "12_day_no_sale": 60000,
            "24_day": 108000,
            "24_day_no_sale": 120000,
            "30_day": 132000,
            "30_day_no_sale": 150000
        },
        {
            "weight": "65-70",
            "ccal": "1310-1350",
            "1_day": 4900,
            "6_day": 29400,
            "12_day": 55860,
            "12_day_no_sale": 58800,
            "24_day": 105840,
            "24_day_no_sale": 117600,
            "30_day": 129360,
            "30_day_no_sale": 147000
        },
        {
            "weight": "55-60",
            "ccal": "1150-1200",
            "1_day": 4800,
            "6_day": 28800,
            "12_day": 51840,
            "12_day_no_sale": 57600,
            "24_day": 103680,
            "24_day_no_sale": 115200,
            "30_day": 126720,
            "30_day_no_sale": 144000
        }
    ];
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–∞
    const prices = gender === '–ú' ? manPrice : womanPrice;
    return prices.find(price => price.weight === choose_weight);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateChoosePriceDatabase(userId, choosePriceInput, state) {
    const newState = (state !== 'start_choose_price' ? 'default' : 'delivery');
    const gender = await getGenderUser(userId);
    const choose_weight = await getWeightUser(userId);
    const price = await findPrice(gender, choose_weight);
    let priceChoose = 0;
    let dayChoose = '';

    switch (choosePriceInput) {
        case 'üóìÔ∏è 6 –¥–Ω–µ–π ‚ú®':
            priceChoose = price['6_day'];
            dayChoose = '6 –¥–Ω–µ–π';
            break;
        case 'üóìÔ∏è 12 –¥–Ω–µ–π üåü':
            priceChoose = price['12_day'];
            dayChoose = '12 –¥–Ω–µ–π';
            break;
        case 'üóìÔ∏è 24 –¥–Ω–µ–π üí´':
            priceChoose = price['24_day'];
            dayChoose = '24 –¥–Ω–µ–π';
            break;
        case 'üóìÔ∏è 30 –¥–Ω–µ–π üî•':
            priceChoose = price['30_day'];
            dayChoose = '30 –¥–Ω–µ–π';
            break;
        default:
            await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
            return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET choose_price = ?, choose_per_days = ?, state = ? WHERE user_id = ?', [priceChoose, dayChoose, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****              –í–ï–°             *****   *****
 *********************************************************/
async function askWeight(userId) {
    await bot.sendMessage(userId, 'üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 88,5) üèãÔ∏è‚Äç‚ôÇÔ∏è:');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function validateWeight(weightInput) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤–≤–æ–¥, –∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –∏ —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    const normalizedInput = weightInput.replace(',', '.').replace(/[^0-9.]/g, '');
    const weight = parseFloat(normalizedInput);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (isNaN(weight) || weight < 30 || weight > 200) {
        return null; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
    }
    return weight; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateWeightDatabase(userId, weightInput, state) {
    let newState = (state !== 'start_weight' ? 'default' : 'start_fat');
    const validatedWeight = validateWeight(weightInput);

    if (validatedWeight === null) {
        await bot.sendMessage(userId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 30 –¥–æ 200 –∫–≥.');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET weight = ?, state = ? WHERE user_id = ?', [validatedWeight, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****             –ñ–ò–†              *****   *****
 *********************************************************/
async function askFat(userId) {
    await bot.sendMessage(userId, 'üí™ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∞—à–µ–≥–æ –∂–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.25) üìâ:');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function validateFat(fatInput) {
    const normalizedInput = fatInput.replace(',', '.').replace(/[^0-9.]/g, '');
    const fatPercentage = parseFloat(normalizedInput);

    if (isNaN(fatPercentage) || fatPercentage < 0 || fatPercentage > 1) {
        return null;
    }
    return fatPercentage;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateFatDatabase(userId, fatInput, state) {
    const validatedFat = await validateFat(fatInput);
    let newState = (state !== 'start_fat' ? 'default' : 'start_activity');

    if (validatedFat === null) {
        await bot.sendMessage(userId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.25).');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET fat = ?, state = ? WHERE user_id = ?', [validatedFat, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****          –ê–ö–¢–ò–í–ù–û–°–¢–¨          *****   *****
 *********************************************************/
async function askActive(chatID) {
    const activeKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [{text: 'üë©‚Äçüíª –ë—ã—Ç–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞) üè†'}],
                [{text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—é üí™'}],
                [{text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üî•'}],
                [{text: 'üèãÔ∏è‚Äç‚ôÄÔ∏è –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üí¶'}],
                [{text: 'Ô∏è‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é üí¶'}],
                [{text: 'Ô∏èüèãÔ∏è‚Äç‚ôÄÔ∏èüåû –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é (2 —Ä–∞–∑–∞/–¥–µ–Ω—å) üí¶üåô'}]
            ]
        })
    };

    const active = 'üèÉ‚Äç‚ôÇÔ∏èüö¥‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –¥–ª—è –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? üßò‚Äç‚ôÇÔ∏èüìä';
    await bot.sendMessage(chatID, active, activeKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function validateAndGetActivityCoefficient(activityDescription) {
    const activityCoefficients = {
        '–ë—ã—Ç–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)': 1.2,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—é': 1.38,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.46,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.55,
        '–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.64,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é': 1.73,
        '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é (2 —Ä–∞–∑–∞/–¥–µ–Ω—å)': 1.9
    };

    return activityCoefficients[activityDescription] || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function updateActivityDatabase(userId, activityDescription, state) {
    const newActivityCoefficient = validateAndGetActivityCoefficient(activityDescription);
    let newState = (state === 'start_activity' ? 'start_target' : 'default');

    if (newActivityCoefficient === null) {
        await logError(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activityDescription}`);
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET activity = ?, state = ? WHERE user_id = ?', [newActivityCoefficient, newState, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****             –¶–ï–õ–¨             *****   *****
 *********************************************************/
async function askTarget(userId) {
    const targerKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üèãÔ∏è‚Äç‚ôÄÔ∏èü•ó —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ üèÉ‚Äç‚ôÄÔ∏èÔ∏è' },
                    { text: 'üçîüõãÔ∏è –Ω–∞–±–æ—Ä –≤–µ—Å–∞ üç∞' }
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è:', targerKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateTargetDatabase(userId, targetInput, state) {
    const target = ((targetInput === 'üçîüõãÔ∏è –Ω–∞–±–æ—Ä –≤–µ—Å–∞ üç∞') ? '–Ω–∞–±–æ—Ä –≤–µ—Å–∞' : '—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞');
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET target = ? WHERE user_id = ?', [target, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
        await findCaloriesDatabase(userId, state);
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫—à–∏—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****           –ö–ê–õ–û–†–ò–ò            *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—á—ë—Ç–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞
async function findCaloriesDatabase(userId, state) {
    try {
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT weight, fat, activity, target FROM users WHERE user_id = ?', [userId], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => reject(err));
                    return;
                }
                resolve(row);
            });
        });

        if (row) {
            const { weight, fat, activity, target } = row;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            if (weight && fat && activity) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                let gender = await getGenderUser(userId);
                let fatOnKg = weight * fat;
                let BMT = weight - fatOnKg; // –ë–∞–∑–æ–≤–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞
                let BOO = BMT * (gender === '–ú' ? 24 : 23); // –ë–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤
                let activCcal = BOO * activity; // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
                let targetCcal = target === '—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞' ? -300 : 300;

                // –†–∞—Å—á–µ—Ç –ë–ñ–£
                let dayProtein = 2.42 * BMT; // –ü—Ä–æ—Ç–µ–∏–Ω–∞ –≤ –¥–µ–Ω—å
                let dayProteinCcal = dayProtein * 4; // –ö–∫–∞–ª –ø—Ä–æ—Ç–µ–∏–Ω–∞
                let dayFat = 0.7 * BMT; // –ñ–∏—Ä–æ–≤ –≤ –¥–µ–Ω—å
                let dayFatCcal = dayFat * 9; // –ö–∫–∞–ª –∂–∏—Ä–æ–≤
                let dayCarbohydratesCcal = activCcal + targetCcal - dayProteinCcal - dayFatCcal; // –ö–∫–∞–ª —É–≥–ª–µ–≤–æ–¥–æ–≤
                let dayCarbohydrates = dayCarbohydratesCcal / 4; // –£–≥–ª–µ–≤–æ–¥–æ–≤ –≤ –¥–µ–Ω—å
                let dayCcal = activCcal + targetCcal; // –ö–∫–∞–ª –≤ –¥–µ–Ω—å

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ üìù
                let message = `–ü—Ä–∏ –≤–µ—Å–µ –≤ ${weight}–∫–≥ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –∂–∏—Ä–∞ ${(fat * 100).toFixed(2)}% –ø—Ä–∏ —Ü–µ–ª–∏ ${target}, —Ç.–µ`;
                message += `${'—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞' ? "—Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º –≤ -" : "–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã —Å –ø—Ä–æ—Ñ–∏—Ü–∏—Ç–æ–º –≤ +"}300 –∫–∞–ª–æ—Ä–∏–π..\n\n`

                message += `–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –º–∞—Å—Å–∞ –∂–∏—Ä–∞ = ${fatOnKg.toFixed(1)} üò±\n`;
                message += `–ë–ú–¢ (–ë–µ–∑ –ñ–∏—Ä–æ–≤–∞—è –ú–∞—Å—Å–∞ –¢–µ–ª–∞) = ${BMT.toFixed(1)} üî•\n`;
                message += `–í–û–û (–ë–∞–∑–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω) = ${BOO.toFixed(1)} üí™\n`;
                message += `–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ–±—ä—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ = ${activCcal.toFixed(1)}üçè,\n`;
                message += `–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å–µ–≥–æ ${dayCcal} –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏ üçè\n\n`;

                message += `–ê –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ë–ñ–£ –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n`;
                message += `–ë–µ–ª–∫–æ–≤ –Ω–∞ –ö–ì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2.42 –≥/–∫–≥, —Ç.–µ. ${dayProtein.toFixed(1)} –≥ –∏ ${dayProteinCcal.toFixed(1)} –ö–∫–∞–ª. ü•ö\n`;
                message += `–ñ–∏—Ä–æ–≤ –Ω–∞ –ö–ì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0.7 –≥/–∫–≥, —Ç.–µ. ${dayFat.toFixed(1)} –≥ –∏ ${dayFatCcal.toFixed(1)} –ö–∫–∞–ª. üßà\n`;
                message += `–£–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ –ö–ì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${(dayCarbohydratesCcal).toFixed(2)} –≥/–∫–≥, —Ç.–µ. ${(dayCarbohydrates * 7).toFixed(1)} –≥ –∏ ${dayCarbohydratesCcal.toFixed(2)} –ö–∫–∞–ª. üçû`;

                await bot.sendMessage(userId, message);
                const newState = (state !== 'start_target' ? 'default' : 'delivery');

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ calories –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await new Promise((resolve, reject) => {
                    db.run('UPDATE users SET calories = ?, state = ? WHERE user_id = ?', [calories, newState, userId], err => {
                        if (err) {
                            logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`).then(() => reject(err));
                            return;
                        }
                        resolve();
                    });
                });
            } else {
                await logError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π.');
                await bot.sendMessage(userId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.');
            }
        }
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 *****    *****           –î–æ—Å—Ç–∞–≤–∫–∞            *****   *****
 *********************************************************/
async function askDelivery(userId) {
    const deliveryKeyboard = {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            resize_keyboard: true,
            keyboard: [
                [
                    { text: 'üåÖ‚òï –£—Ç—Ä–æ (7-9) üç≥' },
                    { text: 'üåÜüç∑ –í–µ—á–µ—Ä (21-23) üåô' }
                ]
            ]
        })
    };

    await bot.sendMessage(userId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryKeyboard);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function updateDeliveryDatabase(userId, deliveryInput) {
    const validatedDelivery = (deliveryInput === 'üåÖ‚òï –£—Ç—Ä–æ (7-9) üç≥' ? '—É—Ç—Ä–æ':'–≤–µ—á–µ—Ä');

    if (validatedDelivery === null) {
        await bot.sendMessage(userId, '–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.');
        return;
    }

    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET delivery = ?, state = ? WHERE user_id = ?', [validatedDelivery, 'default', userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
        return;
    }
    await bot.sendMessage(userId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è —á—É—Ç—å –ø–æ–∑–∂–µ.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
}
/*********************************************************
 *****    *****            –ü–†–û–ß–ï–ï            *****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserState(userID) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT state FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(row);
            });
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return row ? row.state : null;
    } catch (err) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
        throw err;
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≥–µ–Ω–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getGenderUser(userID) {
    try {
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT gender FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
                    reject(err);
                    return;
                }
                resolve(row);
            });
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return row ? row.gender : null;
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è user_id ${userID}: ${err}`);
        throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getWeightUser(userID) {
    try {
        const row = await new Promise((resolve, reject) => {
            db.get('SELECT choose_weight FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
                    reject(err);
                    return;
                }
                resolve(row);
            });
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return row ? row.choose_weight : null;
    } catch (err) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è user_id ${userID}: ${err}`);
        throw err; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserInDatabase(userID, username) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userID
        const existingUser = await new Promise((resolve, reject) => {
            db.get('SELECT user_id FROM users WHERE user_id = ?', [userID], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(row);
            });
        });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        if (existingUser) {
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        await new Promise((resolve, reject) => {
            const query = 'INSERT INTO users (user_id, username) VALUES (?, ?)';
            db.run(query, [userID, username], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve(); // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            });
        });
    } catch (err) { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`);
        await bot.sendMessage(userID, '–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ user_id
async function updateUsernameInDatabase(userId, newUsername) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET username = ? WHERE user_id = ?', [newUsername, userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${err}`);
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${err}`);
    }
}

// –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function updateStateInDatabase(userID, newState) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET state = ? WHERE user_id = ?', [newState, userID], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è userID ${userID}: ${err}`).then(() => {
                        reject(err);
                    });
                    return;
                }
                resolve();
            });
        });
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
    }
}

// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
async function unsubscribeFromNews(userId) {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET news_letter = 0 WHERE user_id = ?', [userId], (err) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${err}`).then(() => reject(err));
                    return;
                }
                resolve();
            });
        });
        await bot.sendMessage(userId, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.');
    } catch (err) {
        await logError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏: ${err}`);
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUsersSubscribedToNewsletter() {
    return new Promise((resolve, reject) => {
        db.all('SELECT user_id FROM users WHERE news_letter = 1', [], (err, rows) => {
            if (err) {
                logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${err}`).then(() => reject(err));
                return;
            }
            resolve(rows);
        });
    });
}

// –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Ñ–æ—Ç–æ
async function getLargestPhotoFileIdFromMessage(msg) {
    if (!msg.photo || msg.photo.length === 0) {
        return null; // –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    const largestPhoto = msg.photo.sort((a, b) => b.file_size - a.file_size)[0];

    return largestPhoto.file_id;
}

// –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –§–û–¢–û –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (–∏–∑ –ë–î)
async function broadcastPhotoToAllUsers(msg, adminId) {
    let fileId = await getLargestPhotoFileIdFromMessage(msg);


    if (adminId !== ADMIN_ID) {
        console.log('–†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
    }

    try {
        const users = await getUsersSubscribedToNewsletter();

        for (let user of users) {
            await bot.sendPhoto(user.user_id, fileId).catch(err => logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${err}`));
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    } catch (err) {
        logError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${err}`);
    }
}

// –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (–∏–∑ –ë–î)
async function broadcastTextMessageWithUnsubscribe(content, adminId) {
    const unsubscribeText = "\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ -> /cancel";
    const maxMessageLength = 4096 - unsubscribeText.length; // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ø–∏—Å–∫–∏

    if (adminId !== ADMIN_ID) {
        console.log('–†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
    }

    try {
        const users = await getUsersSubscribedToNewsletter();

        for (let user of users) {
            let messageContent = content.slice(0, maxMessageLength) + unsubscribeText;
            let remainingContent = content.slice(maxMessageLength);

            await bot.sendMessage(user.user_id, messageContent).catch(err => logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${err}`));

            while (remainingContent.length > 0) {
                messageContent = remainingContent.slice(0, maxMessageLength);
                remainingContent = remainingContent.slice(maxMessageLength);

                if (remainingContent.length === 0) {
                    messageContent += unsubscribeText;
                }

                await bot.sendMessage(user.user_id, messageContent).catch(err => logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.user_id}: ${err}`));
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    } catch (err) {
        logError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${err}`);
    }
}

// –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö + –∏—Ö username –≤ –¢–ì


// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function sendUserInfo(userId) {
    try {
        const user = await new Promise((resolve, reject) => {
            db.get('SELECT * FROM users WHERE user_id = ?', [userId], (err, row) => {
                if (err) {
                    logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${err}`).then(() => reject(err));
                    return;
                }
                resolve(row);
            });
        });

        if (user) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            let userInfo = `üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`;
            userInfo += `–ü–æ–ª: ${user.gender === '–ú' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n`;
            userInfo += `–†–æ—Å—Ç: ${user.height} —Å–º\n`;
            userInfo += `–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏: ${user.middle} —Å–º\n`;
            userInfo += `–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è: ${user.format}\n`;
            if (user.format === '–æ–±—â–∏–π') {
                userInfo += `–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ—Å: ${user.choose_weight}\n`;
                userInfo += `–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${user.choose_price}\n`;
            } else {
                userInfo += `–í–µ—Å: ${user.weight} –∫–≥\n`;
                userInfo += `–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: ${user.fat}%\n`;
                userInfo += `–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${user.activity}\n`;
                userInfo += `–¶–µ–ª—å: ${user.target}\n`;
                userInfo += `–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${user.state}\n`;
                userInfo += `–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: ${user.calories} –∫–∫–∞–ª\n`;
            }
            userInfo += `–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${user.delivery}\n`;
            userInfo += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.registration_date}\n`;
            userInfo += user.news_letter ? '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: –î–∞\n' : '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: –ù–µ—Ç\n';

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.sendMessage(userId, userInfo);
        } else {
            await bot.sendMessage(userId, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    } catch (err) {
        await logError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${err}`);
        await bot.sendMessage(userId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}
/*********************************************************
 ***    *****   –í–ê–ñ–ù–´–ï –ß–ê–°–¢–ò –î–õ–Ø –†–ê–ë–û–¢–´       ****   *****
 *********************************************************/
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function notifyAdmin(userId, username, text = '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞') {
    if (ADMIN_ID !== userId) {
        await bot.sendMessage(ADMIN_ID, `@${username || userId}: ${text}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function forwardAdmin(msg) {
    await bot.forwardMessage(ADMIN_ID, msg.chat.id, msg.message_id); // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∞–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.on('error', async err => {
    await notifyAdmin(ADMIN_ID, '', `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–ª–∞ –≥–æ–≤–Ω–∞; ${err}`);
    await logError(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err}`);
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('exit', async () => {
    db.close(async err => {
        if (err) {
            await notifyAdmin(ADMIN_ID, '', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${err}`);
        }
    });
});

/*********************************************************
 ***    *****           –¢–ï–õ–ï–§–û–ù               ****   *****
 *********************************************************/
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const updatePhoneNumber = async (userID, phoneNumber) => {
    try {
        await new Promise((resolve, reject) => {
            db.run('UPDATE users SET phone = ? WHERE user_id = ?', [phoneNumber, userID], (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
        console.log(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userID}`); // –ò—Å–ø–æ–ª—å–∑—É–µ–º console.log –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    } catch (err) {
        await logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${err}`);
        await bot.sendMessage(userID, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª
async function logError(err) {
    const errorMessage = `[${new Date().toISOString()}] ${err}\n`;
    try {
        await fs.appendFile('error.log', errorMessage);
    } catch (fileErr) {
        await notifyAdmin(ADMIN_ID, '', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª', fileErr);
    }
}
